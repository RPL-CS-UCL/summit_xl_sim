<?xml version="1.0"?>
<launch>

	<arg name="id_robot" default="summit_xl"/>
	<arg name="x_init_pose" default="0"/>
	<arg name="y_init_pose" default="0"/>
	<arg name="z_init_pose" default="0"/>
	<arg name="xacro_robot" default="summit_xl_std.urdf.xacro"/>
	<arg name="launch_robot_localization" default="false"/>
	<arg name="launch_amcl_and_mapserver" default="false"/>
	<arg name="launch_gmapping" default="false"/>
	<arg name="launch_move_base" default="false"/>
	<arg name="map_file" default="empty/empty.yaml"/>
	<arg name="robot_localization_mode" default="odom"/>
	<arg name="movebase_local_planner" default="teb"/>
	<!-- odom, complete (including gps)-->
	<arg name="omni_drive" default="false"/>
	<arg name="ros_planar_move_plugin" default="false"/>
	<arg name="launch_pad" default="false"/>
	<arg name="use_gpu_for_simulation" default="false"/><!-- use_gpu_for_simulation -->

	<!-- only for advanced simulation -->
	<arg name="launch_advanced_simulation" default="false"/> <!-- one flag activates all -->
	<arg name="launch_base_hw_sim" default="$(arg launch_advanced_simulation)"/>
	<arg name="launch_battery_estimator" default="$(arg launch_advanced_simulation)"/>
	<arg name="launch_perception" default="$(arg launch_advanced_simulation)"/>
	<arg name="launch_navigation" default="$(arg launch_advanced_simulation)"/>
	<arg name="launch_rlc" default="$(arg launch_advanced_simulation)"/>
	<arg name="launch_rlc_rostful" default="$(arg launch_advanced_simulation)"/>
	<arg name="launch_hmi" default="$(arg launch_advanced_simulation)"/>
	<arg name="rlc_rostful_host" default="localhost"/>
	<arg name="rlc_rostful_port" default="8080"/>
	<arg name="merge_lasers" default="$(arg launch_advanced_simulation)"/>
	<arg name="merge_laser_topics" default="front_laser/scan rear_laser/scan"/>


	<!-- BEGIN ROBOT-->
	<group ns="$(arg id_robot)">

		<arg name="prefix" value="$(arg id_robot)_"/>

		<!-- Load the URDF into the ROS Parameter Server -->
		<param name="robot_description" command="$(find xacro)/xacro '$(find summit_xl_description)/robots/$(arg xacro_robot)' prefix:=$(arg prefix) ros_planar_move_plugin:=$(arg ros_planar_move_plugin) omni_wheels:=$(arg omni_drive) gpu:=$(arg use_gpu_for_simulation) --inorder"/>

		<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
			<remap from="/joint_states" to="joint_states" />
		</node>

		<!-- Spawner model into gazebo -->
		<node name="urdf_spawner_summit_model" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-x $(arg x_init_pose) -y $(arg y_init_pose) -z $(arg z_init_pose) -urdf -param robot_description -model $(arg id_robot)" />

		<!-- start summit_xl_control nodes -->
		<include file="$(find summit_xl_control)/launch/summit_xl_control.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="sim" value="true"/>

			<arg if="$(arg omni_drive)" name="kinematics" value="omni"/>
			<arg unless="$(arg omni_drive)" name="kinematics" value="skid"/>

			<arg name="ros_planar_move_plugin" value="$(arg ros_planar_move_plugin)"/>
		</include>

		<!-- robot_localization nodes, publishes transformation world->odom->base_footprint -->
		<include if="$(arg launch_robot_localization)" file="$(find summit_xl_localization)/launch/robot_localization_$(arg robot_localization_mode).launch">
			<arg name="prefix" value="$(arg prefix)"/>
		</include>

		<!-- use static_transform_publisher to define map->odom transform    -->
		<!-- only use if you arenÂ´t using a localization algorithm like amcl -->
		<!--node if="$(arg fake_map_transform)" pkg="tf" type="static_transform_publisher" name="static_map_broadcaster" args="0 0 0 0 0 0 map $(arg namespace)odom 100" /-->

		<!-- amcl and map server base-->
		<include if="$(arg launch_amcl_and_mapserver)" file="$(find summit_xl_localization)/launch/map_server.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="map_file" value="$(arg map_file)"/>
		</include>
		<include if="$(arg launch_amcl_and_mapserver)" file="$(find summit_xl_localization)/launch/amcl.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg if="$(arg omni_drive)" name="odom_model_type" value="omni"/>
			<arg unless="$(arg omni_drive)" name="odom_model_type" value="diff"/>
			<arg name="x_init_pose" value="$(arg x_init_pose)"/>
			<arg name="y_init_pose" value="$(arg y_init_pose)"/>
			<arg name="z_init_pose" value="$(arg z_init_pose)"/>
		</include>

		<!-- move base -->
		<include if="$(arg launch_move_base)" file="$(find summit_xl_navigation)/launch/move_base.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="local_planner" value="$(arg movebase_local_planner)"/>
			<arg if="$(arg omni_drive)" name="differential_robot" value="false"/>
			<arg unless="$(arg omni_drive)" name="differential_robot" value="true"/>
		</include>


		<!-- gmapping -->
		<include if="$(arg launch_gmapping)" file="$(find summit_xl_localization)/launch/slam_gmapping.launch">
			<arg name="prefix" value="$(arg prefix)"/>
		</include>

		<!-- pad -->
		<include  if="$(arg launch_pad)" file="$(find summit_xl_pad)/launch/summit_xl_pad.launch"/>

		<!-- base_hw_sim -->
		<include if="$(arg launch_base_hw_sim)" file="$(find robotnik_base_hw_sim)/launch/summit_xl_hw_sim.launch">
			<arg name="prefix" value="$(arg prefix)"/>
		</include>

		<group if="$(arg launch_battery_estimator)">
			<!-- start dock_manager node -->
			<include file="$(find charge_manager)/launch/charge_manager.launch">
				<arg name="docker_mode" value="manual_sw"/>
				<arg name="inverted_contact_relay_input" value="false"/>
				<arg name="contact_relay_input_number" value="2"/>
				<arg name="charger_relay_output_number" value="1"/>
			</include>

			<!-- start battery_estimation node -->
			<include file="$(find battery_estimation)/launch/table_battery.launch">
				<arg name="battery_voltage" value="48"/>
				<arg name="read_voltage_from_analog_input" value="true"/>
				<arg name="voltage_analog_input_number" value="1" />
				<arg name="current_analog_input_number" value="2" />
			</include>

		</group>

		<include if="$(arg merge_lasers)" file="$(find summit_xl_bringup)/launch/merge_laser.launch">
      <arg name="laserscan_topics" value="$(arg merge_laser_topics)"/>
      <arg name="prefix" value="$(arg prefix)"/>
    </include>

	</group>

	<include if="$(arg launch_perception)" file="$(find summit_xl_perception)/launch/perception_complete.launch">
		<arg name="id_robot" value="$(arg id_robot)"/>
		<arg name="run_reflector_locator" value="true"/>
		<arg name="run_ar_locator" value="true"/>
	</include>

	<include if="$(arg launch_navigation)" file="$(find summit_xl_navigation)/launch/navigation_complete.launch">
		<arg name="id_robot" value="$(arg id_robot)"/>
		<arg name="has_docker" value="true"/>
		<arg name="run_laser_docker" value="true"/>
	</include>

	<group if="$(arg launch_rlc)">
		<!-- start dock_manager node -->
		<include file="$(find summit_xl_robot_local_control)/launch/robot_local_control.launch">
			<arg name="id_robot" value="$(arg id_robot)"/>
		</include>

		<!-- start battery_estimation node -->
		<include if="$(arg launch_rlc_rostful)" file="$(find summit_xl_robot_local_control)/launch/rostful_server.launch">
			<arg name="id_robot" value="$(arg id_robot)"/>
			<arg name="host" value="$(arg rlc_rostful_host)"/>
			<arg name="port" value="$(arg rlc_rostful_port)"/>
		</include>

	</group>

	<include if="$(arg launch_hmi)" file="$(find robotnik_hmi)/launch/robotnik_hmi.launch">
		<arg name="id_robot" value="$(arg id_robot)"/>
		<arg name="launch_system_monitor" value="false"/>
	</include>


</launch>
